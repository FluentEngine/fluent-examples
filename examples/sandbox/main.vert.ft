#include "fluent.hlsl"

static const float2 positions[3] = { (-0.5f).xx, float2(0.5f, -0.5f), float2(0.0f, 0.5f) };
static const float3 colors[3] = { float3(1.0f, 0.0f, 0.0f), float3(0.0f, 1.0f, 0.0f), float3(0.0f, 0.0f, 1.0f) };

cbuf(ubo, 0)
{
    float4x4 projection;
    float4x4 view;
};

StructuredBuffer<float4x4> u_transforms : register(t1);

push_constant(pc)
{
	uint instance_id; // D3D12 and vulkan instance id not same
}

struct Input
{
	float3 position : POSITION;
    float3 normal : NORMAL;
    float2 tex_coord : TEXCOORD0;
};

struct Output
{
    float4 position : SV_Position;
    float3 normal : NORMAL0;
};

Output main(Input stage_input)
{
    Output stage_output;
	stage_output.position = mul(projection, mul(view, mul(u_transforms[ instance_id ], float4(stage_input.position, 1.0))));
	stage_output.normal = mul(float3x3(u_transforms[ instance_id ]), stage_input.normal);
    return stage_output;
}
